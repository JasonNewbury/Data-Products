test <- read.csv("C:/Users/Jason/Desktop/Home Depot Kaggle/test.csv/test.csv")
View(test)
train <- read.csv("C:/Users/Jason/Desktop/Home Depot Kaggle/train.csv/train.csv")
View(train)
str(train$search_term)
str(test$search_term)
str(train$product_uid)
head(train$product_uid)
x<- train$product_uid == 100001
x <- subset(train$product_uid == 100001)
x<- train$product_uid[1]
x
x <- train$product_uid %in% "100001"
x
x <- train[which(train$product_uid=="100001")]
x
head(x)
train
train$search_term
x <- train$search_term[1]
x
y <- subset(train by train$search_term[1])
y <- subset(train, train$search_term == x)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y -1)
lm(x~y )
lm(y~0 +x )
data(mtcars)
lm(mtcars$mpg~mtcars$wt)
lm(mpg~wt, data = mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xm <- mean(x)
xs <- std(x)
xs <- sqrt(var(x))
(x[1]-xm)/xs
(x - mean(x)) / sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~X)
x
?lm
fit<- lm(y~x)
lm(y~x)
lm(y~X)
summary(fit)
data("mtcars")
fit<- lm(wt~mpg,data=mtcars)
summary(fit)
fit<- lm(mpg~wt,data=mtcars)
summary(fit)
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x=mean(mtcars$wt)), interval="confidence")
x=mtcars$wt
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x=mean(x)), interval="confidence")
2*3
predict(fit,newdata=data.frame(x=mean(x)), interval="confidence")
fit
y=mtcars$mpg
fit <- lm(y~x)
predict(fit,newdata=data.frame(x=mean(x)), interval="confidence")
?mtcars
summary(fit)
predict(fit, newdata = data.frame(x = 3), interval = ("prediction"))
predict(fit, newdata = data.frame(x = 2), interval = ("prediction"))
fit2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit2$df) * sumCoef2[2, 2])
library(datasets)
data(mtcars)
colnames(mtcars)
lm(mpg~ factor(cyl)+wt)
lm(mpg~ factor(cyl)+wt, data = mtcars)
lm(mpg~ factor(cyl), data = mtcars)
fit<- lm(mpg~ factor(cyl)+wt, data = mtcars)
summary(fit)
fit2<-lm(mpg~ factor(cyl), data = mtcars)
summary(fit2)
fit2<-lm(mpg~ factor(cyl)*wt, data = mtcars)
summary(fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hat
fit(y~x)
fit<- lm(y~x)
hatvalues(fit)
dfbeta(fit)
dfbetas(fit)
library(MASS)
data("shuttle")
?shuttle
auto<-lm(use~wind,data = shuttle)
auto
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
shuttle2
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
fit
exp(coef(fit))
.2513/.2831
1.285714/1.327273
fit<-glm(use2 ~ factor(wind) + factor(magn) - 1, family = binomial, data = shuttle2)
fit
exp(coef(fit))
1.43/1.48
data("InsectSprays")
?InsectSprays
colnames(InsectSprays)
fit<-lm(count~factor(spary), data=InsectSprays, family=poisson)
fit<-lm(count~factor(spray), data=InsectSprays, family=poisson)
fit
14.5=.83333
14.5+.83333
14.500/15.3333
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
data(mtcars)
colnames(mtcars)
?mtcars
summary(mtcars$am)
count(mtcars$am)
unique(mtcars$am)
```{r}
mtcars$am<-as.factor(mtcars$am)
mtcars$am<-as.factor(mtcars$am)
summary(mtcars$mpg)
fit<- lm(mpg~am,data=mtcars)
summary(fit)
fit$coefficients
fit<-lm(mpg~.=data=mtcars)
fit$coefficients
fit<-lm(mpg ~ .= data = mtcars)
fit<-lm(mpg ~ ., data = mtcars)
fit$coefficients
summary(fit2)
fit2<- lm(mpg~am,data=mtcars)
summary(fit2)
summary(fit2$coefficients)
fit2$coefficients
summary(fit2)$coefficients
summary(fit)$coefficients
pairs(mtcars)
?pairs
?mtcars
fit3<- lm(mpg~am+wt,data=mtcars)
fit4<- lm(mpg~am+wt+drat,data=mtcars)
fit5<- lm(mpg~am+wt+drat+disp,data=mtcars)
fit6<- lm(mpg~am+wt+drat+disp+gear,data=mtcars)
anova(fit2,fit3,fit4,fit5,fit6)
bestmodel <- step(fit1, direction = "both")
bestmodel <- step(fit, direction = "both")
?step
summary(bestmodel)
fit3<- lm(mpg~am+wt,data=mtcars)
fit4<- lm(mpg~am+wt+qsec,data=mtcars)
anova(fit2,fit3,fit4)
fit3<- lm(mpg~am+wt,data=mtcars)
fit4<- lm(mpg~am+wt+qsec,data=mtcars)
anova(fit2,fit3,fit4)
summary(fit4)$coef
bestmodel <- step(fit, direction = "both")
fit<-lm(mpg ~ ., data = mtcars)
bestmodel <- step(fit, direction = "both")
summary(bestmodel)
data("mtcars")
colnames(mtcars)
unique(mtcars$am)
summary(mtcars$mpg)
fit<-lm(mpg ~ ., data = mtcars)
summary(fit)$coefficients
fit2<- lm(mpg~am,data=mtcars)
summary(fit2)$coefficients
bestmodel <- step(fit, direction = "both")
summary(bestmodel)
fit3<- lm(mpg~am+wt,data=mtcars)
fit4<- lm(mpg~am+wt+qsec,data=mtcars)
anova(fit2,fit3,fit4)
summary(fit4)$coef
?mtcars
summary(fit4)$coef
summary(bestmodel)$coef
par(mfrow=c(2, 2))
plot(bestmodel)
plot(fit)
fit
plot(fit3)
fit3 <- step(fit, direction = "both", echo=FALSE)
fit3 <- step(fit, direction = "both")
invisiable(fit3 <- step(fit, direction = "both"))
invisible(fit3 <- step(fit, direction = "both"))
5*3
fit3 <- capture.output(step(fit, direction = "both"))
summary(fit3)$coef
fit3
fit3 <- step(fit, direction = "both",print=FALSE)
fit3 <- step(fit, direction = "both",print=FALSE,trace = FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("caret")
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(caret)
install.packages("pbkrtest")
install.packages(c("BH", "boot", "class", "cluster", "codetools", "curl", "data.table", "digest", "evaluate", "foreign", "formatR", "ggplot2", "gridExtra", "gtable", "highr", "htmltools", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "lubridate", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "R6", "Rcpp", "RCurl", "rJava", "rmarkdown", "rpart", "rstudioapi", "scales", "spatial", "stringi", "survival", "testthat", "XML"))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("pbkrtest")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("pbkrtest")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segmentationOriginal$Case
intrain<- segmentationOriginal$Case == "Train"
traindata <- segmentationOriginal[intrain,]
testdata <- segmentationOriginal[!intrain,]
seed(125)
set.seed(125)
cartmodel<- train(class~.,dara=traindata,method="rpart")
cartmodel<- train(class~.,data=traindata,method="rpart")
cartmodel<- train(class ~ .,data = traindata,method="rpart")
cartmodel<- train(Class ~ .,data = traindata,method="rpart")
install.packages("e1071")
cartmodel<- train(Class ~ .,data = traindata,method="rpart")
cartmodel$finalModel
plot(cartmodel$finalModel)
install.packages("rattle")
library(rattle)
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
fancyRpartPlot(cartModel$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(cartModel$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
colnames(olive)
train(Area~., data = olive, method="rpart")
cartmodel<-train(Area~., data = olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(cartmodel,newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
colnames(train)
colnames(trainSA)
cartmodel<- train(chd~ age+alchol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binominal")
cartmodel<- train(chd~ age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binominal")
logitModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(logitModel)
predictTrain <- predict(logitModel, trainSA)
predictTest <- predict(logitModel, testSA)
missClass(trainSA$chd, predictTrain)
missClass(testSA$chd, predictTrain)
missClass(testSA$chd, predictTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
colname(vowel.train)
colnames(vowel.train)
as.factor(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod<- randomforest(y~.,data = vowel.train,importance=FALSE)
mod<- randomForest(y~.,data = vowel.train,importance=FALSE)
mod<- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(caret)
mod<- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(AppliedPredictiveModeling)
mod<- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(pgmm)
mod<- randomForest(y ~ ., data = vowel.train, importance = FALSE)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
data("airquality")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
install.packages("shiny")
library(datasets)
load(sleep)
Titanic
data<- Titanic
data
?Titanic
data<-as.dataframe(data)
head(data)
colnames(data)
rownames(data)
data[1,1]
data[2]
data<- InsectSprays
head(data)
?InsectSprays
insect <- InsectSprays
insect$spray
count(insect$spray)
?count
summary(insect$spray)
d<- dummyVars(~ A,B,C,D,E,F,data=insect,fullRank = T)
library(caret)
d<- dummyVars(~ A,B,C,D,E,F,data=insect,fullRank = T)
d<- dummyVars(~ A+B+C+D+E+F,data=insect,fullRank = T)
colnames(insect)
d<- dummyVars(~ spray ,data=insect,fullRank = T)
d
dummies <- data.frame(predict(d, newdata = spray))
dummies <- data.frame(predict(d, newdata = insect))
dummies
insect <- cbind(insect,dummies)
head(insect)
d<- dummyVars(~ spray ,data=insect,fullRank = F)
dummies <- data.frame(predict(d, newdata = insect))
insect <- cbind(insect,dummies)
head(insect)
library(datasets)
library(caret)
insect<- InsectSprays
d<- dummyVars(~ spray ,data=insect,fullRank = F)
dummies <- data.frame(predict(d, newdata = insect))
insect <- cbind(insect,dummies)
head(insect)
insect<--insect$spray
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
insect<- InsectSprays
d<- dummyVars(~ spray ,data=insect,fullRank = F)
dummies <- data.frame(predict(d, newdata = insect))
insect <- cbind(insect,dummies)
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
install.packages("shiny")
install.packages("shiny")
runExample("01_hello")
library(shiny)
runExample("01_hello")
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
qplot(insect$count, insectt$spray, data = insect)
qplot(insect$count, insectt=$spray, data = insect)
qplot(insect$count, insect$spray, data = insect)
qplot(insect$count, insect$spray.A, data = insect)
qplot(insect$spray.A, insect$count, data = insect)
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
install.packages("markdown")
install.packages("markdown")
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
InsectSprays$count
mtcars
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
pestsub <- subset(InsectSprays$spray=="A")
?subset
pestsub <- InsectSprays$spray == "A"
pestsub <- subset( InsectSprays, InsectSprays$spray=="A")
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
?hist
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
?barplot
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
hist?
?hist
shiny::runApp('C:/Users/Jason/Desktop/Coursea/Data Products')
